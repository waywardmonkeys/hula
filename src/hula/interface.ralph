(define-module interface
  import: (runtime/core toolbox/dom)
  export: (<window> <resizer>))

;; window

(define-class <window> ())

(define-function initialize ((window <window> #key label))
  (bind ((element (set! (get window "element")
                        (create-element "div" class: "window")))
         (header (set! (get window "header")
                       (create-element "div" class: "header")))
         (label (set! (get window "label")
                      (create-element "label")))
         (content (set! (get window "content")
                        (create-element "div" class: "content")))
         (footer  (set! (get window "footer")
                        (create-element "div" class: "footer"))))
    (add-child header label)
    (add-child element header)
    (add-child element content)
    (add-child element footer)))

(define-function label ((window <window>))
  (js:get-property window "label" "innerText"))

(define-function (setter label) ((window <window>) label)
  (set! (js:get-property window "label" "innerText") label))

;; resizer

(define-class <resizer> ()
  handle
  min-width
  max-width
  min-height
  max-height)

(define-function initialize ((resizer <resizer>) #key handle
                             min-width max-width min-height max-height)
  (bind ((handle (set! (get resizer "handle")
                       (or handle (create-element "div")))))
    (add-class handle "resizer"))
  (set! (get resizer "min-width") min-width)
  (set! (get resizer "max-width") max-width)
  (set! (get resizer "min-height") min-height)
  (set! (get resizer "max-height") max-height))

(define-function add-child ((window <window>) (resizer <resizer>))
  (bind ((element (get window "element"))
         (handle (get resizer "handle"))
         (start-x) (start-y)
         (start-width) (start-height))
    (add-child element handle)
    (bind-methods ((move (event)
                     (bind ((x (get event "clientX"))
                            (y (get event "clientY"))
                            (width (+ start-width (- x start-x)))
                            (height (+ start-height (- y start-y)))
                            (new-width (if (< width (get resizer "min-width"))
                                           (get resizer "min-width")
                                           width))
                            (new-height (if (< height (get resizer "min-height"))
                                            (get resizer "min-height")
                                            height))
                            (new-width (if (> new-width (get resizer "max-width"))
                                           (get resizer "max-width")
                                           new-width))
                            (new-height (if (> new-height (get resizer "max-height"))
                                            (get resizer "max-height")
                                          new-height)))
                       (trigger-event window (make-event "resize"))
                       (set! (element-width element) new-width)
                       (set! (element-height element) new-height))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (get event "clientX"))
                     (set! start-y (get event "clientY"))
                     (set! start-width (element-width element))
                     (set! start-height (element-height element))
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener handle "mousedown" down #t))))
