(define-module interface
  import: (runtime/core toolbox/dom)
  export: (<window> <resizer>))

(define-generic attach (object target))

;; component

(define-class <component> ()
  element)

(define-function attach ((component <component>) element)
  (append-child element (get component "element")))

;; view

(define-class <view> (<component>)
  header
  label)

(define-function header-label ((view <view>))
  (js:get-property view "label" "innerHTML"))

(define-function (setter header-label) ((view <view>) label)
  (set! (js:get-property view "label" "innerHTML") label))

;; window

(define-class <window> (<view>))

(define-function initialize ((window <window>) #key label)
  (bind ((element (set! (get window "element")
                        (create-element "div" class: "window")))
         (header (set! (get window "header")
                       (create-element "div" class: "header")))
         (label-element (set! (get window "label")
                      (create-element "label")))
         (content (set! (get window "content")
                        (create-element "div" class: "content")))
         (footer  (set! (get window "footer")
                        (create-element "div" class: "footer"))))
    (append-child header label-element)
    (append-child element header)
    (append-child element content)
    (append-child element footer)
    (set! (header-label window) label)))

;; note

(define-class <note> (<view>))

(define-function initialize ((note <note>) #key label)
  (bind ((element (set! (get note "element")
                        (create-element "div" class: "note")))
         (header (set! (get note "header")
                       (create-element "div" class: "header")))
         (label-element (set! (get note "label")
                      (create-element "label")))
         (content (set! (get note "content")
                        (create-element "div" class: "content"))))
    (append-child header label-element)
    (append-child element header)
    (append-child element content)
    (set! (header-label note) label)))

;; dragger

(define-class <dragger> (<component>))

(define-function initialize ((dragger <dragger>) #key element)
  (bind ((element (set! (get dragger "element")
                        (or element (create-element "div")))))
    (add-class element "dragger")))

(define-function attach ((dragger <dragger>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get dragger "element"))
         (start-x) (start-y)
         (start-left) (start-top))
    (append-child view-element element)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "clientX"))
                            (y (js:get-property event "clientY"))
                            (left (+ start-left (- x start-x)))
                            (top (+ start-top (- y start-y)))
                            (new-left (if (< left 0) 0 left))
                            (new-top (if (< top 0) 0 top)))
                       (trigger-event view (make-event "move"))
                       (set! (element-left view-element) new-left)
                       (set! (element-top view-element) new-top))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (set! (get view-element "style" "cursor")
                           "default")
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "clientX"))
                     (set! start-y (js:get-property event "clientY"))
                     (set! start-left (element-left view-element))
                     (set! start-top (element-top view-element))
                     (set! (get view-element "style" "cursor")
                           "move")
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; closer

(define-class <closer> (<component>))

(define-function initialize ((closer <closer>) #key element)
  (bind ((element (set! (get closer "element")
                        (or element (create-element "button")))))
    (add-class element "close")))

(define-function attach ((closer <closer>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get closer "element"))
         (closing? #f))
    (append-child view-element element)
    (bind-methods ((finished (event)
                     (when closing?
                       (delete-element view-element)
                       (trigger view (make-event "close"))))
                    (click (event)
                      (do (method (type)
                            (add-listener view-element type finished #f))
                          (make-array "webkitTransitionEnd" "transitionend"))
                      (add-class view-element "closed")))
      (add-listener element "click" click #f))))

;; resizer

(define-class <resizer> (<component>)
  min-width
  max-width
  min-height
  max-height)

(define-function initialize ((resizer <resizer>) #key element
                             min-width max-width min-height max-height)
  (bind ((element (set! (get resizer "element")
                        (or element (create-element "div")))))
    (add-class element "resizer"))
  (set! (get resizer "min-width") min-width)
  (set! (get resizer "max-width") max-width)
  (set! (get resizer "min-height") min-height)
  (set! (get resizer "max-height") max-height))

(define-function attach ((resizer <resizer>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get resizer "element"))
         (start-x) (start-y)
         (start-width) (start-height))
    (append-child view-element element)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "clientX"))
                            (y (js:get-property event "clientY"))
                            (width (+ start-width (- x start-x)))
                            (height (+ start-height (- y start-y)))
                            (new-width (if (< width (get resizer "min-width"))
                                           (get resizer "min-width")
                                           width))
                            (new-height (if (< height (get resizer "min-height"))
                                            (get resizer "min-height")
                                            height))
                            (new-width (if (> new-width (get resizer "max-width"))
                                           (get resizer "max-width")
                                           new-width))
                            (new-height (if (> new-height (get resizer "max-height"))
                                            (get resizer "max-height")
                                          new-height)))
                       (trigger-event view (make-event "resize"))
                       (set! (element-width view-element) new-width)
                       (set! (element-height view-element) new-height))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "clientX"))
                     (set! start-y (js:get-property event "clientY"))
                     (set! start-width (element-width view-element))
                     (set! start-height (element-height view-element))
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))