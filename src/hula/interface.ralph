(define-module interface
  import: (runtime/core runtime/regexp runtime/watch
           toolbox/dom toolbox/interface
           hula/request hula/search hula/environment hula/grapher)
  export: (<window> <resizer>
           *context-menu* *workspace*))

(define-function fill (template replacements)
  (do (method (key)
        (js:var regexp (make <regexp>
                             pattern: (concatenate "{" (as-string key) "}")
                             global?: #t))
        (js:var replacement (js:get-property replacements key))
        (set! template (replace template regexp replacement)))
      (keys replacements))
  template)

;; state

(define *views* [])

(define-function save-state ()
  (map (method (view)
         (bind ((type (type view))
                (slots (get type "%own-slots"))
                (initializers (make-object)))
           (do (method (slot)
                 (set! (get initializers slot)
                       (get view slot)))
               slots)
           (make-object "type" (get type "%name")
                        "position" (view-position view)
                        "size" (view-size view)
                        "initializers" initializers)))
       *views*))

(define-function restore-state (state)
  (do (method (description)
        (bind ((type (get *module* (get description "type")))
               (initializers (get description "initializers"))
               (arguments []))
          (do (method (key)
                (push-last arguments (keyword key))
                (push-last arguments (get initializers key)))
              (keys initializers))
          (bind ((view (apply show-view type
                              (concatenate (get description "position")
                                           arguments))))
            (set! (view-size view)
                  (get description "size")))))
      state))

;; view

(define-class <view> (<component>)
  header
  icon
  label
  content)

(define-function initialize ((view <view>) #rest rest #key label)
  (apply next-method view rest)
  (bind ((element (set! (get view "element")
                        (make-element "div" class: "view")))
         (header (set! (get view "header")
                       (make-element "div"
                                     class: "header"
                                     parent: element)))
         (icon (set! (get view "icon")
                     (make-element "div"
                                   class: "icon"
                                   parent: header)))
         (label-element (set! (get view "label")
                              (make-element "label" parent: header)))
         (content (set! (get view "content")
                        (make-element "div"
                                      class: "content"
                                      parent: element)))
         (resizer (make <resizer>))
         (closer (make <closer>))
         (dragger (make <dragger> element: (get view "header"))))
    (set! (header-label view) label)
    (attach resizer view)
    (attach closer view)
    (attach dragger view)))

(define-function view-position ((view <view>))
  (bind-properties (element) view
    [(element-left element)
     (element-top element)]))

(define-function (setter view-position) ((view <view>) position)
  (bind-properties (element) view
    (destructuring-bind (left top) position
      (set! (element-left element) left)
      (set! (element-top element) top)))
  (trigger-event view (make-event "move")))

(define-function view-size ((view <view>))
  (bind-properties (element) view
    [(element-width element)
     (element-height element)]))

(define-function (setter view-size) ((view <view>) size)
  (bind-properties (element) view
    (destructuring-bind (width height) size
      (set! (element-width element) width)
      (set! (element-height element) height)))
  (trigger-event view (make-event "resize")))


(define-function header-label ((view <view>))
  (js:get-property view "label" "innerHTML"))

(define-function (setter header-label) ((view <view>) label)
  (set! (js:get-property view "label" "innerHTML") label))

;; window

(define-class <window> (<view>))

(define-function initialize ((window <window>) #rest rest #key label)
  (apply next-method window rest)
  (bind ((element (get window "element"))
         (footer (set! (get window "footer")
                       (make-element "div"
                                     class: "footer"
                                     parent: element)))
         (footer-label
          (set! (get window "footer-label")
                (make-element "label" parent: footer))))
    (add-class element "window")))

(define-function footer-label ((window <window>))
  (js:get-property window "footer-label" "innerHTML"))

(define-function (setter footer-label) ((window <window>) label)
  (set! (js:get-property window "footer-label" "innerHTML") label))

;; remote

(define-class <remote-window> (<window>)
  request-component)

(define-function initialize ((window <remote-window>) #rest rest)
  (apply next-method window rest)
  (bind ((request-component
          (set! (get window "request-component")
                (make <request-component> target: window)))
         (content (get window "content")))
    (attach request-component content)))

(define-function request ((window <remote-window>))
  (request (get window "request-component")))

;; note

(define-class <note> (<view>))

(define-function initialize ((note <note>) #key label text)
  (next-method note label: label)
  (bind-properties (element content) note
    (bind ((text-element (set! (get note "text")
                               (make-element "textarea"))))
      (add-class element "note")
      (append-child content text-element)
      (set! (note-text note) text))))

(define-function note-text ((note <note>))
  (js:get-property note "text" "innerHTML"))

(define-function (setter note-text) ((note <view>) text)
  (set! (js:get-property note "text" "innerHTML") text))

;; dragger

(define-class <dragger> (<component>))

(define-function initialize ((dragger <dragger>) #key element)
  (when element
    (set! (get dragger "element-provided?") #t))
  (bind ((element (set! (get dragger "element")
                        (or element (make-element "div")))))
    (add-class element "dragger")))

(define-function attach ((dragger <dragger>) (view <view>))
  (unless (get dragger "element-provided?")
    (next-method dragger view))
  (bind ((view-element (get view "element"))
         (element (get dragger "element"))
         (start-x) (start-y)
         (start-left) (start-top))
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "pageX"))
                            (y (js:get-property event "pageY"))
                            (left (+ start-left (- x start-x)))
                            (top (+ start-top (- y start-y)))
                            (new-left (if (< left 0) 0 left))
                            (new-top (if (< top 0) 0 top)))
                       (trigger-event view (make-event "move"))
                       (set! (element-left view-element) new-left)
                       (set! (element-top view-element) new-top))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (set! (get view-element "style" "cursor")
                           "default")
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "pageX"))
                     (set! start-y (js:get-property event "pageY"))
                     (set! start-left (element-left view-element))
                     (set! start-top (element-top view-element))
                     (set! (get view-element "style" "cursor")
                           "move")
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; closer

(define-class <closer> (<component>))

(define-function initialize ((closer <closer>) #key element)
  (bind ((element (set! (get closer "element")
                        (or element (make-element "button")))))
    (add-class element "close")))

(define-function attach ((closer <closer>) (view <view>))
  (next-method closer view)
  (bind ((view-element (get view "element"))
         (element (get closer "element"))
         (closing? #f))
    (bind-methods ((finished (event)
                     (when closing?
                       (delete-element view-element)
                       (remove! *views* view)
                       (trigger-event view (make-event "close"))))
                    (click (event)
                      (set! closing? #t)
                      (do (method (type)
                            (add-listener view-element type finished #f))
                          ["webkitTransitionEnd" "transitionend"])
                      (add-class view-element "closed")))
      (add-listener element "click" click #f))))

;; resizer

(define-class <resizer> (<component>))

(define-function initialize ((resizer <resizer>) #key element)
  (bind ((element (set! (get resizer "element")
                        (or element (make-element "div")))))
    (add-class element "resizer")))

(define-function attach ((resizer <resizer>) (view <view>))
  (next-method resizer view)
  (bind ((view-element (get view "element"))
         (element (get resizer "element"))
         (start-x) (start-y)
         (start-width) (start-height))
    (set! (get view "resizer") resizer)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "pageX"))
                            (y (js:get-property event "pageY"))
                            (width (+ start-width (- x start-x)))
                            (height (+ start-height (- y start-y))))
                       (trigger-event view (make-event "resize"))
                       (set! (element-width view-element) width)
                       (set! (element-height view-element) height))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "pageX"))
                     (set! start-y (js:get-property event "pageY"))
                     (set! start-width (element-width view-element))
                     (set! start-height (element-height view-element))
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; arrow

(define-function create-svg-element (name)
  ((js:get-property document "createElementNS")
   "http://www.w3.org/2000/svg" name))

(define-class <arrow> (<component>)
  path
  source
  target
  offset)

(define-function initialize ((arrow <arrow>)
                             #rest rest #key source target)
  (apply next-method arrow rest)
  (bind ((element (set! (get arrow "element")
                        (create-svg-element "svg")))
         (path (set! (get arrow "path")
                     (create-svg-element "path")))
         (updater (curry update arrow)))
    (append-child element path)
    (add-listener source "move" updater)
    (add-listener source "resize" updater)
    (add-listener target "move" updater)
    (add-listener target "resize" updater)
    (watch arrow "source" updater)
    (watch arrow "target" updater)
    ;; pass context-menu event to workspace
    (add-listener element "contextmenu"
                  (method (event)
                    (trigger-event (get *workspace* "element")
                                   event)
                    (prevent-default event)
                    (stop-propagation event)))
    (updater)))

(define-function update ((arrow <arrow>))
  (js:var path (get arrow "path"))
  (js:var element (get arrow "element"))
  (js:var offset (get arrow "offset"))
  (js:var source-element (get arrow "source" "element"))
  (js:var target-element (get arrow "target" "element"))
  (js:var source-header-height (element-height (get arrow "source" "header")))
  (js:var target-header-height (element-height (get arrow "target" "header")))
  (js:var start-x (element-left source-element))
  (js:var start-y (+ (element-top source-element) offset))
  (js:var start-y* (+ start-y (/ source-header-height 2)))
  (js:var end-x (element-left target-element))
  (js:var end-y (element-top target-element))
  (js:var end-y* (+ end-y (/ target-header-height 2)))
  (js:var left (min start-x end-x))
  (js:var top (min start-y end-y))
  (js:var distance-x (abs (- start-x end-x)))
  (js:var distance-y (abs (- start-y end-y)))
  (js:var behind? (< start-x end-x))
  (js:var below? (< start-y end-y))
  (js:var width (+ distance-x
                   (element-width
                    (if behind?
                        target-element
                        source-element))))
  (js:var height (+ distance-y
                    (element-height
                     (if below?
                         target-element
                         source-element))))
  (set! (element-top element) top)
  (set! (element-left element) left)
  (set! (element-width element) width)
  (set! (element-height element) height)
  (js:var points (if behind?
                     (bind ((start-x* (- (+ start-x (element-width source-element)) 5))
                            (middle (round (+ start-x* (/ (abs (- end-x start-x*)) 2)))))
                       [[start-x* start-y*]
                        [middle start-y*]
                        [middle end-y*]
                        [end-x end-y*]])
                     (bind ((end-x* (+ end-x (element-width target-element)))
                            (middle (round (+ end-x* (/ (abs (- end-x* start-x)) 2)))))
                       [[(+ start-x 5) start-y*]
                        [middle start-y*]
                        [middle end-y*]
                        [end-x* end-y*]])))
  (js:var points* (map (method (point)
                         [(- (first point) left)
                          (- (second point) top)])
                       points))
  (set! (attribute path "d")
        (concatenate "M" (join (map (rcurry join ",") points*) "L"))))

;;

(define-class <search-field> (<component>)
  instant?)

(define-function initialize ((component <search-field>) #rest rest)
  (apply next-method component rest)
  (bind ((section (set! (get component "element")
                        (make-element "section" class: "search")))
         (input (set! (get component "input")
                      (make-element "input" parent: section))))
    (set! (attribute input "type") "search")
    (set! (attribute input "results") 0)))

(define-function attach ((component <search-field>) (view <view>))
 (bind-properties (instant? element input) component
    (insert-before element (get view "content"))
    (bind ((timeout #f))
      (add-listener input "keyup"
                    (method (event)
                      (when timeout
                        (clear-timeout timeout))
                      (set! timeout
                            (set-timeout
                             (method ()
                               (when (or (== (get event "keyCode") 13)
                                         instant?)
                                 (trigger-event component
                                                (make-event "search"
                                                            query: (get input "value")))))
                             300)))))))

(define-function focus ((component <search-field>))
  (focus-element (get component "input")))

;; search

(define-class <search-window> (<window>))

(define-function initialize ((window <search-window>))
  (next-method window)
  (bind-properties (element content) window
    (bind ((results (set! (get window "results")
                          (make-element "ul" parent: content)))
           (search (set! (get window "search")
                         (make <search-field>))))
      (attach search window)
      (add-listener search "search"
                    (method (event)
                      (perform-search window (get event "query")))))
    (add-class element "search"))
  (set! (header-label window) "Search")
  (set! (footer-label window) "0 Results"))

(define-function attach ((window <search-window>) element)
  (next-method window element)
  (focus (get window "search")))

(define-function perform-search ((window <search-window>) query)
  (search query
          (method (results)
            (bind ((element (get window "element")))
              (animate element (method ()
                                 ;; TODO: calculate sensible height
                                 (set! (element-height element) 300)))
              ;; TODO:
              ;; - save results in window
              ;; - add each result as component
              (log "results:" results)))))

;; graph window

(define-class <grapher-window> (<window>)
  object)

(define-function initialize ((window <grapher-window>)
                             #rest rest #key graph object)
  (apply next-method window rest)
  (bind-properties (element header content) window
    (bind ((object-component (make <qualified-object-component>
                                   object: object))
           (grapher (set! (get window "grapher")
                          (make <grapher>
                                object: object
                                graph: graph))))
      (attach object-component header)
      (attach grapher content))
    (add-class element "graph")
    (set! (header-label window)
          (get graph "name"))))

;; editor component

(define-class <editor> (<component>))

(define-function initialize ((editor <editor>) #key source)
  (bind ((element (set! (get editor "element")
                        (make-element "div" class: "editor")))
         (text (set! (get editor "text")
                     (make-element "textarea" parent: element))))
    (if source
        (set! (js:get-property text "innerHTML") source)
      (hide editor))
    (set! (get editor "editor")
          ((js:get-property "CodeMirror" "fromTextArea")
           text (make-object
                 "lineNumbers" #t
                 "matchBrackets" #t)))))

(define-function (setter source) ((editor <editor>) source)
  ((js:get-property editor "editor" "setValue") source))

;; editor window

(define-class <editor-window> (<remote-window>)
  object
  editor)

(define-function initialize ((window <editor-window>)
                             #rest rest #key object)
  (apply next-method window rest)
  (add-class (get window "element") "editor")
  (set! (header-label window) "Source")
  (bind ((editor (set! (get window "editor")
                       (make <editor>))))
    (append-child (get window "content")
                  (get editor "element"))
    (add-listener window "data"
                  (method (event)
                    (show editor)
                    (bind ((info (decode-json (get event "data"))))
                      (set! (source editor)
                            (get info "source"))
                      (set! (footer-label window)
                            (concatenate
                             (get info "filename") " ("
                             (get info "line") " &ndash; "
                             (get info "end-line") ")")))))
    (bind-methods ((walk-editor-nodes (node)
                     (do (method (child)
                           ;; TODO: support more types, parents always objects'?
                           (if (has-class? child "dylan-symbolClass")
                               (unless (has? child "component")
                                 (bind ((name (js:get-property child "innerText"))
                                        (object (as-environment-object
                                                 (make-object "name" name
                                                              "type" "class"
                                                              "incomplete?" #t
                                                              "parents" (get object "parents")))))
                                   (set! (get child "component")
                                         (make <object-component>
                                               element: child
                                               object: object))))
                               (walk-editor-nodes child)))
                         (children node))))
      (add-listener (get editor "element") "DOMSubtreeModified"
                    (method (event)
                      (walk-editor-nodes
                       (js:get-property event "target"))))))
  (when object
    (bind ((object-component
            (make <qualified-object-component>
                  object: object)))
      (attach object-component
              (get window "header")))
    (request window)))


(define-function request ((window <editor-window>))
  (hide (get window "editor"))
  (next-method window))

(define-function request-url ((window <editor-window>))
  (concatenate "/api/source"
               (dereference (get window "object"))))

;; context menu

(define-class <context-menu> (<component>)
  x y)

(define-function initialize ((component <context-menu>) #key entries)
   (bind ((element (set! (get component "element")
                         (make-element "menu"))))
    (set! (attribute element "type") "context")))

(define *context-menu* (make <context-menu>))

(define-generic context-menu-items (object))

(define-function attach ((menu <context-menu>) target)
  (bind ((element (get menu "element"))
         (target-element (if (instance? target <component>)
                             (get target "element")
                             target)))
    ;; menu is only added once to document.body
    (unless (parent element)
      (append-child body element)
      (add-listener document "click"
                    (method (event)
                      (unless (and (== (js:get-property event "pageX")
                                       (get menu "x"))
                                   (== (js:get-property event "pageY")
                                       (get menu "y")))
                        (hide menu)))))
    (add-listener target-element "contextmenu"
                  (curry show menu target))))

(define-function show ((menu <context-menu>) target event)
  (bind ((x (set! (get menu "x")
                  (js:get-property event "pageX")))
         (y (set! (get menu "y")
                  (js:get-property event "pageY")))
         (element (get menu "element"))
         (items (or (context-menu-items target)
                    (make-object))))
  (unless (empty? (keys items))
    ;; set position
    (set! (element-left element)
          (+ x 5))
    (set! (element-top element)
          (- y 10))
    ;; populate entries
    (delete-children element)
    (do (method (label)
                (bind ((command (make-element "command" parent: element)))
                  (set! (attribute command "label") label)
                  (set! (js:get-property command "innerHTML") label)
                  (add-listener command "click" (get items label))))
        (keys items))
    ;; show menu
    (next-method menu))
  ;; prevent default menu
  (prevent-default event)
  (stop-propagation event)))

;; browser

(define-class <browser> (<remote-window>)
  collection
  object)

(define-function initialize ((browser <browser>) #rest rest
                             #key collection object)
  (apply next-method browser rest)
  (bind-properties (element header content) browser
    (bind ((results (set! (get browser "results")
                          (make-element "ul" parent: content)))
           (search (set! (get browser "search")
                         (make <search-field> instant?: #t))))
      (when object
        (attach (make <qualified-object-component>
                      object: object)
                header))
      (attach search browser)
      (add-class element "browser")
      (add-class element (get collection "identifier"))
      (set! (header-label browser)
            (get collection "name"))
      (add-listener search "search"
                    (method (event)
                      (set! (get browser "prefix")
                            (get event "query"))
                      (request browser)))
      (add-listener browser "data"
                    (method (event)
                      (do (method (object)
                            (attach (make <object-component>
                                          object: object)
                                    (make-element "li" parent: results)))
                          (as-environment-objects
                           (decode-json (get event "data"))
                           default-type: (get collection "type"))))))
    (request browser)))

(define-function show-view (type x y #rest rest)
  (bind ((view (apply make type rest)))
    (push-last *views* view)
    (set! (view-position view)
          [(- x 10) (- y 10)])
    (attach view body)
    view))

(define-function as-environment-objects (response #key default-type)
  (bind ((parents (get response "parents")))
    (map (method (result)
           (bind ((result (if (instance? result <string>)
                              (make-object "name" result)
                              result)))
            (when parents
              (set! (get result "parents")
                    parents))
            (unless (get result "type")
              (set! (get result "type")
                    default-type))
            (as-environment-object result)))
         (get response "objects"))))

(define-function request ((browser <browser>))
  (delete-children (get browser "results"))
  (next-method browser))

(define-function request-url ((collection <environment-collection>)
                              #key object)
  (concatenate "/api/" (get collection "identifier")
               (if object (dereference object) "")))

(define-function request-url ((browser <browser>))
  (bind-properties (object collection prefix) browser
    (concatenate (request-url collection object: object)
                 (if (and prefix
                          (not (empty? prefix)))
                     (concatenate "?" (encode (make-object
                                               "prefix" prefix)))
                     ""))))

;; workspace

(define-class <workspace> (<component>))

(define-function initialize ((workspace <workspace>))
  (set! (get workspace "element")
        (make-element "div" class: "workspace")))

(define *workspace* (make <workspace>))

(define-function context-menu-items ((workspace <workspace>))
  (bind ((items (make-object
                 "Search" (method (event)
                            (show-view <search-window>
                             (js:get-property event "pageX")
                             (js:get-property event "pageY"))))))
    (do (method (collection)
          (set! (get items (get collection "name"))
                (method (event)
                  (show-view <browser>
                   (js:get-property event "pageX")
                   (js:get-property event "pageY")
                   collection: collection))))
        *root-collections*)
    items))

;; activity

(define-class <activity> (<component>))

(define-function initialize ((activity <activity>))
  (set! (get activity "element")
        (make-element "div" class: "activity"))
  (hide activity))

;; N/A

(define-class <not-available> (<component>))

(define-function initialize ((not-available <not-available>))
  (bind ((element (set! (get not-available "element")
                        (make-element "div" class: "not-available"))))
    (set! (js:get-property element "innerHTML") "Not available")
    (hide not-available)))

;; component for <environment-object>

(define-class <object-component> (<component>)
  object)

(define-function initialize ((component <object-component>)
                             #rest rest #key element object simple?)
  (apply next-method component rest)
  (bind ((element-provided? element)
         (element (if element-provided?
                      element
                      (set! (get component "element")
                            (make-element "div" class: "object"))))
         (request-component (set! (get component "request-component")
                                  (make <request-component> target: component)))
         (type (get object "type"))
         (type-display (get type "display")))
    (add-class element (get type "identifier"))
    (set! (attribute element "title")
          (get type "name"))
    (attach request-component component)
    (bind-methods ((display ()
                     (if (and type-display
                              (not simple?))
                         (type-display object element)
                         (set! (js:get-property element "innerText")
                               (get object "name")))))
      (add-listener component "data"
                    (method (event)
                      (extend object
                              (as-environment-object
                               (decode-json (get event "data"))))
                      (set! (get object "incomplete?") #f)
                      (display)))
      (unless element-provided?
        (if (and (get object "incomplete?")
                 (not simple?))
            (request request-component)
            (display)))))
  (attach *context-menu* component))

(define-function request-url ((component <object-component>))
  (concatenate "/api/info"
               (dereference (get component "object"))))


(define-function context-menu-items ((component <object-component>))
  (bind ((type (get component "object" "type"))
         (items (make-object)))
    (when (get type "has-source?")
      (set! (get items "Source")
            (method (event)
              (show-view <editor-window>
               (js:get-property event "pageX")
               (js:get-property event "pageY")
               object: (get component "object")))))
    (do (method (collection)
          (set! (get items (get collection "name"))
                (method (event)
                  (show-view <browser>
                   (js:get-property event "pageX")
                   (js:get-property event "pageY")
                   collection: collection
                   object: (get component "object")))))
        (get type "collections"))
    (do (method (graph)
          (set! (get items (get graph "name"))
                (method (event)
                  (show-view <grapher-window>
                   (js:get-property event "pageX")
                   (js:get-property event "pageY")
                   graph: graph
                   object: (get component "object")))))
        (get type "graphs"))
    items))

;; qualified object

(define-class <qualified-object-component> (<component>)
  object)

(define-function initialize ((component <qualified-object-component>)
                             #rest rest #key object)
  (apply next-method component rest)
  (bind ((element (set! (get component "element")
                        (make-element "div" class: "qualified-object")))
         (object-component (make <object-component>
                                 object: object)))
    (attach object-component element)
    (bind-methods ((add-parents ()
                     (do (method (object)
                           (attach (make <object-component>
                                         object: object
                                         simple?: #t)
                                   element))
                         (reverse (get object "parents")))))
      (if (get object "incomplete?")
          (add-listener object-component "data"
                        (method (event)
                          (add-parents)))
          (add-parents)))))