(define-module interface
  import: (runtime/core runtime/watch
           toolbox/dom)
  export: (<window> <resizer>))

;; component

(define-class <component> ()
  element)

(define-generic attach (component target))

(define-function attach ((component <component>) element)
  (append-child element (get component "element")))

(define-generic update (component))

;; view

(define-class <view> (<component>)
  header
  icon
  label
  content)

(define-function initialize ((view <view>) #key label)
  (bind ((element (set! (get view "element")
                        (create-element "div" class: "view")))
         (header (set! (get view "header")
                       (create-element "div" class: "header")))
         (icon (set! (get view "icon")
                     (create-element "div" class: "icon")))
         (label-element (set! (get view "label")
                              (create-element "label")))
         (content (set! (get view "content")
                        (create-element "div" class: "content")))
         (resizer (make <resizer>))
         (closer (make <closer>))
         (dragger (make <dragger> element: (get view "header"))))
    (append-child header icon)
    (append-child header label-element)
    (append-child element header)
    (append-child element content)
    (set! (header-label view) label)
    (attach resizer view)
    (attach closer view)
    (attach dragger view)))

(define-function (setter view-position) ((view <view>) position)
  (bind ((element (get view "element")))
    (destructuring-bind (left top) position
      (set! (element-left element) left)
      (set! (element-top element) top)))
  (trigger-event view (make-event "move")))

(define-function header-label ((view <view>))
  (js:get-property view "label" "innerHTML"))

(define-function (setter header-label) ((view <view>) label)
  (set! (js:get-property view "label" "innerHTML") label))

;; window

(define-class <window> (<view>))

(define-function initialize ((window <window>) #key label)
  (next-method window label: label)
  (bind ((element (get window "element"))
         (footer (set! (get window "footer")
                       (create-element "div" class: "footer"))))
    (add-class element "window")
    (append-child element footer)))

;; note

(define-class <note> (<view>))

(define-function initialize ((note <note>) #key label text)
  (next-method note label: label)
  (bind ((element (get note "element"))
         (content (get note "content"))
         (text-element (set! (get note "text")
                             (create-element "textarea"))))
    (add-class element "note")
    (append-child content text-element)
    (set! (note-text note) text)))

(define-function note-text ((note <note>))
  (js:get-property note "text" "innerHTML"))

(define-function (setter note-text) ((note <view>) text)
  (set! (js:get-property note "text" "innerHTML") text))

;; dragger

(define-class <dragger> (<component>))

(define-function initialize ((dragger <dragger>) #key element)
  (bind ((element (set! (get dragger "element")
                        (or element (create-element "div")))))
    (add-class element "dragger")))

(define-function attach ((dragger <dragger>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get dragger "element"))
         (start-x) (start-y)
         (start-left) (start-top))
    (append-child view-element element)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "clientX"))
                            (y (js:get-property event "clientY"))
                            (left (+ start-left (- x start-x)))
                            (top (+ start-top (- y start-y)))
                            (new-left (if (< left 0) 0 left))
                            (new-top (if (< top 0) 0 top)))
                       (trigger-event view (make-event "move"))
                       (set! (element-left view-element) new-left)
                       (set! (element-top view-element) new-top))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (set! (get view-element "style" "cursor")
                           "default")
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "clientX"))
                     (set! start-y (js:get-property event "clientY"))
                     (set! start-left (element-left view-element))
                     (set! start-top (element-top view-element))
                     (set! (get view-element "style" "cursor")
                           "move")
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; closer

(define-class <closer> (<component>))

(define-function initialize ((closer <closer>) #key element)
  (bind ((element (set! (get closer "element")
                        (or element (create-element "button")))))
    (add-class element "close")))

(define-function attach ((closer <closer>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get closer "element"))
         (closing? #f))
    (append-child view-element element)
    (bind-methods ((finished (event)
                     (when closing?
                       (delete-element view-element)
                       (trigger view (make-event "close"))))
                    (click (event)
                      (do (method (type)
                            (add-listener view-element type finished #f))
                          (make-array "webkitTransitionEnd" "transitionend"))
                      (add-class view-element "closed")))
      (add-listener element "click" click #f))))

;; resizer

(define-class <resizer> (<component>))

(define-function initialize ((resizer <resizer>) #key element)
  (bind ((element (set! (get resizer "element")
                        (or element (create-element "div")))))
    (add-class element "resizer")))

(define-function attach ((resizer <resizer>) (view <view>))
  (bind ((view-element (get view "element"))
         (element (get resizer "element"))
         (start-x) (start-y)
         (start-width) (start-height))
    (set! (get view "resizer") resizer)
    (append-child view-element element)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "clientX"))
                            (y (js:get-property event "clientY"))
                            (width (+ start-width (- x start-x)))
                            (height (+ start-height (- y start-y))))
                       (trigger-event view (make-event "resize"))
                       (set! (element-width view-element) width)
                       (set! (element-height view-element) height))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "clientX"))
                     (set! start-y (js:get-property event "clientY"))
                     (set! start-width (element-width view-element))
                     (set! start-height (element-height view-element))
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; arrow

(define-function create-svg-element (name)
  ((js:get-property document "createElementNS")
   "http://www.w3.org/2000/svg" name))

(define-class <arrow> (<component>)
  path
  source
  target
  offset)

(define-function initialize ((arrow <arrow>) #key source target offset)
  (bind ((element (set! (get arrow "element")
                        (create-svg-element "svg")))
         (path (set! (get arrow "path")
                     (create-svg-element "path")))
         (updater (curry update arrow)))
    (append-child element path)
    (set! (get arrow "source") source)
    (set! (get arrow "target") target)
    (set! (get arrow "offset") offset)
    (add-listener source "move" updater)
    (add-listener source "resize" updater)
    (add-listener target "move" updater)
    (add-listener target "resize" updater)
    (watch arrow "source" updater)
    (watch arrow "target" updater)
    (updater)))

(define-function update ((arrow <arrow>))
  (js:var path (get arrow "path"))
  (js:var element (get arrow "element"))
  (js:var offset (get arrow "offset"))
  (js:var source-element (get arrow "source" "element"))
  (js:var target-element (get arrow "target" "element"))
  (js:var source-header-height (element-height (get arrow "source" "header")))
  (js:var target-header-height (element-height (get arrow "target" "header")))
  (js:var start-x (element-left source-element))
  (js:var start-y (+ (element-top source-element) offset))
  (js:var start-y* (+ start-y (/ source-header-height 2)))
  (js:var end-x (element-left target-element))
  (js:var end-y (element-top target-element))
  (js:var end-y* (+ end-y (/ target-header-height 2)))
  (js:var left (min start-x end-x))
  (js:var top (min start-y end-y))
  (js:var distance-x (abs (- start-x end-x)))
  (js:var distance-y (abs (- start-y end-y)))
  (js:var behind? (< start-x end-x))
  (js:var below? (< start-y end-y))
  (js:var width (+ distance-x
                   (element-width
                    (if behind?
                        target-element
                        source-element))))
  (js:var height (+ distance-y
                    (element-height
                     (if below?
                         target-element
                         source-element))))
  (set! (element-top element) top)
  (set! (element-left element) left)
  (set! (element-width element) width)
  (set! (element-height element) height)
  (js:var points (if behind?
                     (bind ((start-x* (- (+ start-x (element-width source-element)) 5))
                            (middle (round (+ start-x* (/ (abs (- end-x start-x*)) 2)))))
                       (make-array
                        (make-array start-x* start-y*)
                        (make-array middle start-y*)
                        (make-array middle end-y*)
                        (make-array end-x end-y*)))
                     (bind ((end-x* (+ end-x (element-width target-element)))
                            (middle (round (+ end-x* (/ (abs (- end-x* start-x)) 2)))))
                       (make-array
                        (make-array (+ start-x 5) start-y*)
                        (make-array middle start-y*)
                        (make-array middle end-y*)
                        (make-array end-x* end-y*)))))
  (js:var points* (map (method (point)
                         (make-array (- (first point) left)
                                     (- (second point) top)))
                       points))
  (set! (attribute path "d")
        (concatenate "M" (join (map (rcurry join ",") points*) "L"))))

;; search

(define-class <search-window> (<window>))

(define-function initialize ((window <search-window>))
  (next-method window)
  (bind ((footer-label-element
          (set! (get window "footer-label")
                (create-element "label")))
         (content (get window "content"))
         (section (create-element "section"
                                  parent: content))
         (results (set! (get window "results")
                        (create-element "ul"
                                        parent: content)))
         (input (set! (get window "input")
                      (create-element "input"
                                      parent: section))))
    (append-child (get window "footer")
                  footer-label-element)
    (set! (attribute input "type") "search")
    (add-listener input "keypress"
                  (method (event)
                    (when (== (get event "keyCode") 13)
                      (initiate-search window)))))
  (add-class (get window "element") "search")
  (set! (header-label window) "Search")
  (set! (footer-label window) "0 Results"))

(define-function attach ((window <search-window>) element)
  (next-method window element)
  (focus (get window "input")))

(define-function footer-label ((window <search-window>))
  (js:get-property window "footer-label" "innerHTML"))

(define-function (setter footer-label) ((window <search-window>) label)
  (set! (js:get-property window "footer-label" "innerHTML") label))

(define-function initiate-search ((window <search-window>))
  (log "search:" (get window "input" "value"))
  (bind ((element (get window "element")))
    (animate element (method ()
                       (set! (element-height element) 300)))))

;; editor component

(define-class <editor> (<component>))

(define-function initialize ((editor <editor>))
  (bind ((element (set! (get editor "element")
                        (create-element "div" class: "editor")))
         (text (set! (get editor "text")
                     (create-element "textarea"
                                     parent: element))))
    (set! (js:get-property text "innerHTML")
          "function foo () { return 'foo'; }")
    (set! (get editor "editor")
          ((js:get-property "CodeMirror" "fromTextArea")
           text (make-object
                 "lineNumbers" #t
                 "matchBrackets" #t)))))

;; editor window

(define-class <editor-window> (<window>))

(define-function initialize ((window <editor-window>))
  (next-method window)
  (add-class (get window "element") "editor")
  (set! (header-label window) "Editor")
  (bind ((editor (make <editor>)))
    (append-child (get window "content")
                  (get editor "element"))))


