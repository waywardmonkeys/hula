(define-module interface
  import: (runtime/core runtime/watch
           toolbox/dom hula/search)
  export: (<window> <resizer> *context-menu* *workspace*))

;; component

(define-class <component> ()
  element)

(define-generic attach (component target))

(define-function attach ((component <component>) element)
  (append-child (if (instance? element <component>)
                    (get element "element")
                    element)
                (get component "element")))

(define-generic update (component))

;; view

(define-class <view> (<component>)
  header
  icon
  label
  content)

(define-function initialize ((view <view>) #key label)
  (bind ((element (set! (get view "element")
                        (create-element "div" class: "view")))
         (header (set! (get view "header")
                       (create-element "div"
                                       class: "header"
                                       parent: element)))
         (icon (set! (get view "icon")
                     (create-element "div"
                                     class: "icon"
                                     parent: header)))
         (label-element (set! (get view "label")
                              (create-element "label"
                                              parent: header)))
         (content (set! (get view "content")
                        (create-element "div"
                                        class: "content"
                                        parent: element)))
         (resizer (make <resizer>))
         (closer (make <closer>))
         (dragger (make <dragger> element: (get view "header"))))
    (set! (header-label view) label)
    (attach resizer view)
    (attach closer view)
    (attach dragger view)))

(define-function (setter view-position) ((view <view>) position)
  (bind ((element (get view "element")))
    (destructuring-bind (left top) position
      (set! (element-left element) left)
      (set! (element-top element) top)))
  (trigger-event view (make-event "move")))

(define-function header-label ((view <view>))
  (js:get-property view "label" "innerHTML"))

(define-function (setter header-label) ((view <view>) label)
  (set! (js:get-property view "label" "innerHTML") label))

;; window

(define-class <window> (<view>))

(define-function initialize ((window <window>) #key label)
  (next-method window label: label)
  (bind ((element (get window "element"))
         (footer (set! (get window "footer")
                       (create-element "div" class: "footer"))))
    (add-class element "window")
    (append-child element footer)))

;; note

(define-class <note> (<view>))

(define-function initialize ((note <note>) #key label text)
  (next-method note label: label)
  (bind ((element (get note "element"))
         (content (get note "content"))
         (text-element (set! (get note "text")
                             (create-element "textarea"))))
    (add-class element "note")
    (append-child content text-element)
    (set! (note-text note) text)))

(define-function note-text ((note <note>))
  (js:get-property note "text" "innerHTML"))

(define-function (setter note-text) ((note <view>) text)
  (set! (js:get-property note "text" "innerHTML") text))

;; dragger

(define-class <dragger> (<component>))

(define-function initialize ((dragger <dragger>) #key element)
  (when element
    (set! (get dragger "element-provided") #t))
  (bind ((element (set! (get dragger "element")
                        (or element (create-element "div")))))
    (add-class element "dragger")))

(define-function attach ((dragger <dragger>) (view <view>))
  (unless (get dragger "element-provided")
    (next-method dragger view))
  (bind ((view-element (get view "element"))
         (element (get dragger "element"))
         (start-x) (start-y)
         (start-left) (start-top))
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "pageX"))
                            (y (js:get-property event "pageY"))
                            (left (+ start-left (- x start-x)))
                            (top (+ start-top (- y start-y)))
                            (new-left (if (< left 0) 0 left))
                            (new-top (if (< top 0) 0 top)))
                       (trigger-event view (make-event "move"))
                       (set! (element-left view-element) new-left)
                       (set! (element-top view-element) new-top))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (set! (get view-element "style" "cursor")
                           "default")
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "pageX"))
                     (set! start-y (js:get-property event "pageY"))
                     (set! start-left (element-left view-element))
                     (set! start-top (element-top view-element))
                     (set! (get view-element "style" "cursor")
                           "move")
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; closer

(define-class <closer> (<component>))

(define-function initialize ((closer <closer>) #key element)
  (bind ((element (set! (get closer "element")
                        (or element (create-element "button")))))
    (add-class element "close")))

(define-function attach ((closer <closer>) (view <view>))
  (next-method closer view)
  (bind ((view-element (get view "element"))
         (element (get closer "element"))
         (closing? #f))
    (bind-methods ((finished (event)
                     (when closing?
                       (delete-element view-element)
                       (trigger-event view (make-event "close"))))
                    (click (event)
                      (set! closing? #t)
                      (do (method (type)
                            (add-listener view-element type finished #f))
                          ["webkitTransitionEnd" "transitionend"])
                      (add-class view-element "closed")))
      (add-listener element "click" click #f))))

;; resizer

(define-class <resizer> (<component>))

(define-function initialize ((resizer <resizer>) #key element)
  (bind ((element (set! (get resizer "element")
                        (or element (create-element "div")))))
    (add-class element "resizer")))

(define-function attach ((resizer <resizer>) (view <view>))
  (next-method resizer view)
  (bind ((view-element (get view "element"))
         (element (get resizer "element"))
         (start-x) (start-y)
         (start-width) (start-height))
    (set! (get view "resizer") resizer)
    (bind-methods ((move (event)
                     (bind ((x (js:get-property event "pageX"))
                            (y (js:get-property event "pageY"))
                            (width (+ start-width (- x start-x)))
                            (height (+ start-height (- y start-y))))
                       (trigger-event view (make-event "resize"))
                       (set! (element-width view-element) width)
                       (set! (element-height view-element) height))
                     (stop-propagation event)
                     (prevent-default event))
                   (up (event)
                     (remove-listener document "mouseup" up #t)
                     (remove-listener document "mousemove" move #t)
                     (stop-propagation event)
                     (prevent-default event))
                   (down (event)
                     (add-listener document "mouseup" up #t)
                     (add-listener document "mousemove" move #t)
                     (set! start-x (js:get-property event "pageX"))
                     (set! start-y (js:get-property event "pageY"))
                     (set! start-width (element-width view-element))
                     (set! start-height (element-height view-element))
                     (stop-propagation event)
                     (prevent-default event)))
      (add-listener element "mousedown" down #t))))

;; arrow

(define-function create-svg-element (name)
  ((js:get-property document "createElementNS")
   "http://www.w3.org/2000/svg" name))

(define-class <arrow> (<component>)
  path
  source
  target
  offset)

(define-function initialize ((arrow <arrow>)
                             #rest rest #key source target)
  (apply next-method arrow rest)
  (bind ((element (set! (get arrow "element")
                        (create-svg-element "svg")))
         (path (set! (get arrow "path")
                     (create-svg-element "path")))
         (updater (curry update arrow)))
    (append-child element path)
    (add-listener source "move" updater)
    (add-listener source "resize" updater)
    (add-listener target "move" updater)
    (add-listener target "resize" updater)
    (watch arrow "source" updater)
    (watch arrow "target" updater)
    ;; pass context-menu event to workspace
    (add-listener element "contextmenu"
                  (method (event)
                    (trigger-event (get *workspace* "element")
                                   event)
                    (prevent-default event)
                    (stop-propagation event)))
    (updater)))

(define-function update ((arrow <arrow>))
  (js:var path (get arrow "path"))
  (js:var element (get arrow "element"))
  (js:var offset (get arrow "offset"))
  (js:var source-element (get arrow "source" "element"))
  (js:var target-element (get arrow "target" "element"))
  (js:var source-header-height (element-height (get arrow "source" "header")))
  (js:var target-header-height (element-height (get arrow "target" "header")))
  (js:var start-x (element-left source-element))
  (js:var start-y (+ (element-top source-element) offset))
  (js:var start-y* (+ start-y (/ source-header-height 2)))
  (js:var end-x (element-left target-element))
  (js:var end-y (element-top target-element))
  (js:var end-y* (+ end-y (/ target-header-height 2)))
  (js:var left (min start-x end-x))
  (js:var top (min start-y end-y))
  (js:var distance-x (abs (- start-x end-x)))
  (js:var distance-y (abs (- start-y end-y)))
  (js:var behind? (< start-x end-x))
  (js:var below? (< start-y end-y))
  (js:var width (+ distance-x
                   (element-width
                    (if behind?
                        target-element
                        source-element))))
  (js:var height (+ distance-y
                    (element-height
                     (if below?
                         target-element
                         source-element))))
  (set! (element-top element) top)
  (set! (element-left element) left)
  (set! (element-width element) width)
  (set! (element-height element) height)
  (js:var points (if behind?
                     (bind ((start-x* (- (+ start-x (element-width source-element)) 5))
                            (middle (round (+ start-x* (/ (abs (- end-x start-x*)) 2)))))
                       [[start-x* start-y*]
                        [middle start-y*]
                        [middle end-y*]
                        [end-x end-y*]])
                     (bind ((end-x* (+ end-x (element-width target-element)))
                            (middle (round (+ end-x* (/ (abs (- end-x* start-x)) 2)))))
                       [[(+ start-x 5) start-y*]
                        [middle start-y*]
                        [middle end-y*]
                        [end-x* end-y*]])))
  (js:var points* (map (method (point)
                         [(- (first point) left)
                          (- (second point) top)])
                       points))
  (set! (attribute path "d")
        (concatenate "M" (join (map (rcurry join ",") points*) "L"))))

;;

(define-class <search-field> (<component>))

(define-function initialize ((component <search-field>))
  (bind ((section (set! (get component "element")
                        (create-element "section"
                                        class: "search")))
         (input (set! (get component "input")
                      (create-element "input"
                                      parent: section))))
    (set! (attribute input "type") "search")))

(define-function attach ((component <search-field>) (view <view>)
                         #key instant?)
  (insert-before (get component "element")
                 (get view "content"))
  (add-listener (get component "input") "keypress"
                (method (event)
                  (when (or (== (get event "keyCode") 13)
                            instant?)
                    (bind ((query (get component "input" "value")))
                      (trigger-event component
                                     (make-event "search"
                                                 query: query)))))))

(define-function focus ((component <search-field>))
  (focus-element (get component "input")))

;; search

(define-class <search-window> (<window>))

(define-function initialize ((window <search-window>))
  (next-method window)
  (bind ((footer-label-element
          (set! (get window "footer-label")
                (create-element "label")))
         (content (get window "content"))
         (results (set! (get window "results")
                        (create-element "ul"
                                        parent: content)))
         (search (set! (get window "search")
                       (make <search-field>))))
    (attach search window)
    (add-listener search "search"
                  (method (event)
                    (perform-search window (get event "query"))))
    (append-child (get window "footer")
                  footer-label-element))
  (add-class (get window "element") "search")
  (set! (header-label window) "Search")
  (set! (footer-label window) "0 Results"))

(define-function attach ((window <search-window>) element)
  (next-method window element)
  (focus (get window "search")))

(define-function footer-label ((window <search-window>))
  (js:get-property window "footer-label" "innerHTML"))

(define-function (setter footer-label) ((window <search-window>) label)
  (set! (js:get-property window "footer-label" "innerHTML") label))

(define-function perform-search ((window <search-window>) query)
  (search query
          (method (results)
            (bind ((element (get window "element")))
              (animate element (method ()
                                 ;; TODO: calculate sensible height
                                 (set! (element-height element) 300)))
              ;; TODO:
              ;; - save results in window
              ;; - add each result as component
              (log "results:" results)))))

;; editor component

(define-class <editor> (<component>))

(define-function initialize ((editor <editor>))
  (bind ((element (set! (get editor "element")
                        (create-element "div" class: "editor")))
         (text (set! (get editor "text")
                     (create-element "textarea"
                                     parent: element))))
    (set! (js:get-property text "innerHTML")
          "function foo () { return 'foo'; }")
    (set! (get editor "editor")
          ((js:get-property "CodeMirror" "fromTextArea")
           text (make-object
                 "lineNumbers" #t
                 "matchBrackets" #t)))))

;; editor window

(define-class <editor-window> (<window>))

(define-function initialize ((window <editor-window>))
  (next-method window)
  (add-class (get window "element") "editor")
  (set! (header-label window) "Editor")
  (bind ((editor (make <editor>)))
    (append-child (get window "content")
                  (get editor "element"))))

;; context menu

(define-class <context-menu> (<component>)
  x y)

(define-function initialize ((component <context-menu>) #key entries)
   (bind ((element (set! (get component "element")
                         (create-element "menu"))))
    (set! (attribute element "type") "context")))

(define *context-menu* (make <context-menu>))

(define-generic context-menu-items (object))

(define-function attach ((menu <context-menu>) target)
  (bind ((element (get menu "element"))
         (target-element (if (instance? target <component>)
                             (get target "element")
                             target)))
    ;; menu is only added once to document.body
    (unless (parent-element element)
      (append-child body element)
      (add-listener document "click"
                    (method (event)
                      (unless (and (== (js:get-property event "pageX")
                                       (get menu "x"))
                                   (== (js:get-property event "pageY")
                                       (get menu "y")))
                        (remove-class element "active")))))
    (add-listener target-element "contextmenu"
                  (curry show-menu menu target))))

(define-function show-menu ((menu <context-menu>) target event)
  (bind ((x (set! (get menu "x")
                  (js:get-property event "pageX")))
         (y (set! (get menu "y")
                  (js:get-property event "pageY")))
         (element (get menu "element"))
         (items (or (context-menu-items target) [])))
  ;; set position
  (set! (element-left element)
        (+ x 5))
  (set! (element-top element)
        (- y 10))
  ;; populate entries
  (delete-children element)
  (do (method (label)
        (bind ((command (create-element "command" parent: element)))
          (set! (attribute command "label") label)
          (set! (js:get-property command "innerHTML") label)
          (add-listener command "click" (get items label))))
      (keys items))
  ;; show menu
  (add-class element "active")
  ;; prevent default menu
  (prevent-default event)
  (stop-propagation event)))

;; browser

(define-class <type> ()
  single
  collection
  single-name
  collection-name)

(define *types*
  (make-object
   "library" (make <type>
                   single: "library"
                   collection: "libraries"
                   single-name: "Library"
                   collection-name: "Libraries")
   "module" (make <type>
                  single: "module"
                  collection: "modules"
                  single-name: "Module"
                  collection-name: "Modules")))

(define-class <browser> (<window>)
  type
  object)

(define-function initialize ((window <browser>)
                             #rest rest #key type object)
  (apply next-method window rest)
  (bind ((spinner (make <spinner>))
         (content (get window "content"))
         (results (set! (get window "results")
                        (create-element "ul" parent: content)))
         (collection (get *types* type "collection"))
         (collection-name (get *types* type "collection-name"))
         (search (set! (get window "search")
                       (make <search-field>))))
    (attach spinner content)
    (attach search window)
    (add-listener search "search"
                  (method (event)
                    (log "!!")))
    (bind-methods ((add-result (name)
                     (bind ((item (create-element "li" parent: results))
                            (object (make <environment-object> type: type
                                          name: name identifier: name)))
                        (attach object item))))
      (show spinner)
      (bind ((url (concatenate "/api/" collection
                               (if object
                                   (concatenate "/" (get object "name"))
                                   "")))
             (request (make <request> url: url
                            callback: (method (data)
                                        (hide spinner)
                                        (do add-result
                                            (decode-json data))))))
        (add-class (get window "element")
                   "browser")
        (add-class (get window "element")
                   collection)
        (set! (header-label window)
              collection-name)
        (send request)))))

;; workspace

(define-class <workspace> (<component>))

(define-function initialize ((workspace <workspace>))
  (set! (get workspace "element")
        (create-element "div" class: "workspace")))

(define *workspace* (make <workspace>))

(define-function context-menu-items ((workspace <workspace>))
  (make-object
   "Search" (method (event)
              (bind ((search (make <search-window>)))
                (set! (view-position search)
                      [(- (js:get-property event "pageX") 10)
                       (- (js:get-property event "pageY") 10)])
                (attach search body)))
   "Libraries" (method (event)
                 (bind ((browser (make <browser> type: "library")))
                   (set! (view-position browser)
                         [(- (js:get-property event "pageX") 10)
                          (- (js:get-property event "pageY") 10)])
                   (attach browser body)))))

;; spinner

(define-class <spinner> (<component>))

(define-function initialize ((spinner <spinner>))
  (set! (get spinner "element")
        (create-element "div" class: "spinner")))

(define-function show ((spinner <spinner>))
  (add-class (get spinner "element") "active"))

(define-function hide ((spinner <spinner>))
  (remove-class (get spinner "element") "active"))

;; environment object

(define-class <environment-object> (<component>)
  type
  identifier
  name)

(define-function initialize ((object <environment-object>)
                             #rest rest #key name type)
  (apply next-method object rest)
  (bind ((element (set! (get object "element")
                        (create-element "div" class: "object"))))
    (add-class element type)
    (set! (js:get-property element "innerHTML") name))
  (attach *context-menu* object))

(define-function context-menu-items ((object <environment-object>))
  (make-object
   "Modules" (method (event)
               (bind ((browser (make <browser>
                                     type: "module"
                                     object: object)))
                     (set! (view-position browser)
                           [(- (js:get-property event "pageX") 10)
                            (- (js:get-property event "pageY") 10)])
                     (attach browser body)))))
