(define-module grapher
  import: (runtime/core
           toolbox/interface toolbox/dom
           hula/request)
  export: (<grapher>))

;; grapher

(define-class <grapher> (<component>)
  object
  graph)

(define-function initialize ((component <grapher>) #rest rest
                             #key object graph)
  (apply next-method component rest)
  (bind ((element (set! (get component "element")
                        (create-element "div" class: "grapher")))
         (graph (set! (get component "graph")
                      (make <graph-component>
                            object: object
                            graph: graph
                            left?: #t
                            right?: #t))))
    (attach graph element)))

;; node

(define-class <graph-node> (<component>)
  left
  object
  right)

(define-function initialize ((node <graph-node>) #rest rest
                             #key object left? right?)
  (apply next-method node rest)
  (bind ((element (set! (get node "element")
                        (create-element "div" class: "node")))
         (left (when left?
                 (set! (get node "left")
                       (create-element "button" class: "left"))))
         (object (set! (get node "object")
                       (make <object-component>
                             object: object
                             simple?: #t)))
         (right (when right?
                  (set! (get node "right")
                        (create-element "button" class: "right")))))
    (when left?
      (append-child element left)
      (add-listener left "click" (method (event)
                                   (trigger-event node
                                    (make-event "left")))))
    (attach object element)
    (when right?
      (append-child element right)
      (add-listener right "click" (method (event)
                                   (trigger-event node
                                    (make-event "right")))))))

;; graph part

(define-class <graphs> (<component>)
  object
  collection)

(define-function initialize ((graphs <graphs>) #rest rest
                             #key object collection left? right?)
  (apply next-method graphs rest)
  (bind ((element (set! (get graphs "element")
                        (create-element "div" class: "graphs")))
         (request-component
          (set! (get graphs "request-component")
                (make <request-component> target: graphs))))
    (attach request-component
            element)
    (add-class element
               (if left? "before" "after"))
    (add-listener graphs "data"
                  (method (event)
                    (bind ((results (decode-json (get event "data"))))
                          (do (method (object)
                                (attach (make <graph-component>
                                              object: object
                                              left?: left? right?: right?)
                                        element))
                              (as-environment-objects
                               (decode-json (get event "data"))
                               default-type: (get collection "type"))))))))

(define-function request ((graphs <graphs>))
  (request (get graphs "request-component")))

(define-function request-url ((graphs <graphs>))
  (request-url (get graphs "collection")
               object: (get graphs "object")))

;; graph

(define-class <graph-component> (<component>)
  before
  node
  after)

(define-function initialize ((component <graph-component>) #rest rest
                             #key object graph left? right?)
  (apply next-method component rest)
  (bind ((element (set! (get component "element")
                        (create-element "div" class: "graph")))
         (before (when left?
                   (set! (get component "before")
                         (make <graphs>
                               object: object
                               collection: (get graph "left")
                               left?: #t))))
         (node (set! (get component "node")
                     (make <graph-node> object: object
                           left?: left? right?: right?)))
         (after (when right?
                  (set! (get component "after")
                        (make <graphs>
                              object: object
                              collection: (get graph "right")
                              right?: #t)))))
    (when left?
      (attach before element)
      (add-listener node "left"
                    (method (event)
                      (log "LEFT")
                      (request before))))
    (attach node element)
    (when right?
      (attach after element)
      (add-listener node "right"
                    (method (event)
                      (log "RIGHT")
                      (request after))))))