(define-module hula/grapher
  import: (ralph/core
           toolbox/interface toolbox/dom
           hula/request)
  export: (<grapher>))

;; grapher

(define-class <grapher> (<component>)
  object
  graph)

(define-method initialize ((component <grapher>) #rest rest
                             #key object graph)
  (apply next-method component rest)
  (bind ((element (set! (get component "element")
                        (make-element "div" class: "grapher")))
         (graph (set! (get component "graph")
                      (make <graph-component>
                            object: object
                            graph: graph
                            left?: #t
                            right?: #t))))
    (attach graph element)))

;; node

(define-class <graph-node> (<component>)
  left
  object
  object-component
  right)

(define-method initialize ((node <graph-node>) #rest rest
                             #key object left? right?)
  (apply next-method node rest)
  (bind ((element (set! (get node "element")
                        (make-element "div" class: "node")))
         (object-component (set! (get node "object-component")
                                 (make <object-component>
                                       object: object
                                       simple?: #t))))
    (do (method (binding)
          (destructuring-bind (enabled? side) binding
            (when enabled?
              (bind ((button (make-element "button"
                                             class: side)))
                (set! (get node side) button)
                (add-listener button "click"
                              (method (event)
                                (toggle-class button "open")
                                (trigger-event node
                                 (make-event side))))))))
        [[left? "left"] [right? "right"]])
    (when left?
      (append-child element (get node "left")))
    (attach object-component element)
    (when right?
      (append-child element (get node "right")))))

;; graph part

(define-class <graphs> (<component>)
  node
  collection
  fetched?)

(define-method initialize ((graphs <graphs>) #rest rest
                             #key node graph left? right?)
  (apply next-method graphs rest)
  (bind ((side (if left? "left" "right"))
         (collection (set! (get graphs "collection")
                           (get graph side)))
         (element (set! (get graphs "element")
                        (make-element "div" class: "graphs")))
         (request-component
          (set! (get graphs "request-component")
                (make <request-component> target: graphs))))
    (attach request-component
            element)
    (add-class element
               (if left? "before" "after"))
    (add-listener graphs "data"
                  (method (event)
                    (set! (get graphs "fetched?") #t)
                    (bind ((result (decode-json (get event "data"))))
                      (if (empty? (get result "objects"))
                          ;; no objects, hide subgraphs and button
                          (begin
                           (delete-element element)
                           (delete-element (get node side)))
                          ;; add graph-component for each object
                          (do (method (object)
                                (attach (make <graph-component>
                                              object: object
                                              graph: graph
                                              left?: left? right?: right?)
                                        element))
                              (as-environment-objects result
                               default-type: (get collection "type")))))))))

(define-method request ((graphs <graphs>))
  (request (get graphs "request-component")))

(define-method request-url ((graphs <graphs>))
  (request-url (get graphs "collection")
               object: (get graphs "node" "object")))

;; graph

(define-class <graph-component> (<component>)
  before
  node
  after)

(define-method initialize ((component <graph-component>) #rest rest
                             #key object graph left? right?)
  (apply next-method component rest)
  (bind ((element (set! (get component "element")
                        (make-element "div" class: "graph")))
         (node (set! (get component "node")
                     (make <graph-node> object: object
                           left?: left? right?: right?))))
    (do (method (binding)
          (destructuring-bind
              (enabled? part side left? right?) binding
            (when enabled?
              (bind ((graphs (make <graphs>
                                   node: node
                                   graph: graph
                                   left?: left?
                                   right?: right?)))
                (set! (get component part) graphs)
                (hide graphs)
                (add-listener node side
                              (method (event)
                                (if (hidden? graphs)
                                    (begin
                                     (show graphs)
                                     (unless (get graphs "fetched?")
                                       (request graphs)))
                                    (hide graphs))))))))
        [[left? "before" "left" #t #f]
         [right? "after" "right" #f #t]])
    (when left?
      (attach (get component "before") element))
    (attach node element)
    (when right?
      (attach (get component "after") element))))
