(define-module environment
  import: (runtime/core)
  export: (<environment-type> <environment-collection> <environment-object>))

;; types and collections

(define-class <environment-type> ()
  identifier
  name
  (collections [])
  (graphs [])
  (has-source? #t)
  display)

(define-class <environment-collection> ()
  identifier
  name
  type)

(define-class <environment-graph> ()
  name
  left
  right)

(define *root-collections*
  [(make <environment-collection>
         identifier: "libraries"
         name: "Libraries"
         type: "library")])

(define *types* (make-object))

(define-function define-type (identifier name #rest rest)
  (set! (get *types* identifier)
        (apply make <environment-type>
               (concatenate rest
                            [identifier: identifier
                             name: name]))))

(define-function add-object-list (element objects)
  (append-child element (make-text-node " ("))
  (do (method (object)
        (attach (make <object-component>
                      object: object
                      simple?: #t)
                element)
        (append-child element (make-text-node ", ")))
      objects)
  ;; remove superfluous last comma
  (unless (empty? objects)
    (delete-element (js:get-property element "lastChild")))
  (append-child element (make-text-node ")")))

(define-type "library" "Library"
  has-source?: #f
  collections: [(make <environment-collection>
                      identifier: "modules"
                      name: "Modules"
                      type: "module")
                (make <environment-collection>
                      identifier: "defined-modules"
                      name: "Defined modules"
                      type: "module")
                (make <environment-collection>
                      identifier: "used-libraries"
                      name: "Used Libaries"
                      type: "library")])

(define-type "module" "Module"
  has-source?: #f
  collections: [(make <environment-collection>
                      identifier: "used-modules"
                      name: "Used modules"
                      type: "module")
                (make <environment-collection>
                      identifier: "definitions"
                      name: "Defintions")]
  display: (method (object element)
             (append-child element
                           (make-text-node
                            (concatenate (get object "name") " ")))
             (bind ((info (make-element "span"
                                        class: "info"
                                        parent: element)))
               (append-child info
                             (make-text-node
                              (concatenate
                               "(" (as-string
                                    (get object "details" "definitions"))
                               " definitions)"))))))

(define direct-superclasses
  (make <environment-collection>
        identifier: "direct-superclasses"
        name: "Direct superclasses"
        type: "class"))

(define direct-subclasses
  (make <environment-collection>
        identifier: "direct-subclasses"
        name: "Direct subclasses"
        type: "class"))

(define-type "class" "Class"
  collections: [(make <environment-collection>
                      identifier: "direct-slots"
                      name: "Direct slots"
                      type: "slot")
                (make <environment-collection>
                      identifier: "all-slots"
                      name: "All slots"
                      type: "slot")
                direct-superclasses
                (make <environment-collection>
                      identifier: "all-superclasses"
                      name: "All superclasses"
                      type: "class")
                direct-subclasses
                ;; TODO: not supported by backend yet
                ;; (make <environment-collection>
                ;;       identifier: "all-subclasses"
                ;;       name: "All subclasses"
                ;;       type: "class")
                (make <environment-collection>
                      identifier: "direct-methods"
                      name: "Direct methods"
                      type: "method")
                (make <environment-collection>
                      identifier: "all-methods"
                      name: "All methods"
                      type: "method")]
  graphs: [(make <environment-graph>
                 name: "Class graph"
                 left: direct-superclasses
                 right: direct-subclasses)]
  display: (method (object element)
             (append-child element
                           (make-text-node
                            (concatenate (get object "name") " ")))
             (add-object-list element
                              (get object "details" "direct-superclasses"))))

(define-function display-function (object element)
  (bind ((get-type (rcurry get "details" "type")))
    (append-child element
                  (make-text-node
                   (concatenate (get object "name") " ")))
    (add-object-list element
		     (map get-type
			  (get object "details" "required")))
    (append-child element
		  (make-text-node " => "))
    (add-object-list element
		     (map get-type
			  (get object "details" "values")))))

(define clients
  (make <environment-collection>
	identifier: "clients"
	name: "Clients"))

(define clients
  (make <environment-collection>
	identifier: "clients"
	name: "Clients"))

(define used-definitions
  (make <environment-collection>
        identifier: "used-definitions"
        name: "Used definitions"))

(define function-collections
  [clients used-definitions])

(define-type "function" "Function"
  display: display-function
  collections: function-collections)

(define-type "generic-function" "Generic function"
  display: display-function
  collections: (concatenate
                [(make <environment-collection>
                       identifier: "methods"
                       name: "Methods"
                       type: "method")]
                function-collections))

(define-type "method" "method"
  display: display-function
  collections: function-collections)

(define-function display-name/type (object element)
  (append-child element
                (make-text-node
                 (concatenate (get object "name") " :: ")))
  (attach (make <object-component>
                object: (get object "details" "type")
                simple?: #t)
          element))
  ;; TODO: value not working yet, hide for now


(define-type "variable" "Variable"
  display: display-name/type)

(define-type "global-variable" "Global variable"
  display: display-name/type)

(define-type "thread-variable" "Thread variable"
  display: display-name/type)

(define-type "constant" "Constant"
  display: display-name/type)

(define-type "slot" "Slot"
  display: display-name/type)

(define-type "macro" "Macro")

(define-type "domain" "Domain")

(define-type "complex-type-expression" "Complex type expression"
  has-source?: #f)

(define-type "parameter" "Parameter")

;; environment object

(define-class <environment-object> ()
  type
  identifier
  name
  (parents [])
  details)

(define-function dereference (object)
  (bind ((objects (concatenate (map (rcurry get "identifier")
                                    (get object "parents"))
                               [(get object "identifier")])))
    (concatenate "/" (join objects "/"))))

(define-function convert-detail (object)
  (select object instance?
    ((<array>)
     (map convert-detail object))
    ((<string> <number> <boolean>)
     object)
    ((<object>)
     (as-environment-object object))))

(define-function as-environment-object (thing)
  (bind ((object (make <environment-object>
                       name: (get thing "name")
                       identifier: (or (get thing "identifier")
                                       (get thing "name")))))
    (set! (get object "type")
          (get *types* (get thing "type")))
    (if-bind (parents (get thing "parents"))
      (set! (get object "parents")
            (map as-environment-object
                 parents)))
    (do (method (property)
          (set! (get object property)
                (get thing property)))
        ["details" "incomplete?"])
    (bind ((details (get object "details")))
      (do (method (detail)
            (set! (get details detail)
                  (convert-detail (get details detail))))
          (keys details)))
    object))